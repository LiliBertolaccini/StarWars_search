{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport reqApiFetch from '../service/requesteAPI';\nimport starWarContext from './StarWarContext';\nimport StarWarContext from './StarWarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarProvider(_ref) {\n  _s();\n\n  let {\n    children,\n    history\n  } = _ref;\n  const [StarWarProvider, setStarWarProvider] = useState({\n    name: '',\n    species: '',\n    gender: '',\n    episode: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://swapi.dev/api/planets');\n\n      if (!response.ok) {\n        const newError = await response.json();\n        throw newError.message;\n      }\n\n      const data = await response.json();\n      setGitData(json);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({\n        name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: fetchPlanets,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this); //  const [data, setData] = useState([]);\n  //  useEffect(() => {\n  //    reqApiFetch().then((response) => setData(response));\n  //  }, []);\n  //  const value = useMemo(() => ({\n  //    data,\n  //  }), [data]);\n  //  return (\n  //    <StarWarContext.Provider value={value}>\n  //      {children}\n  //    </StarWarContext.Provider>\n  //  );\n}\n\n_s(StarWarProvider, \"iNvZmXAlTvyPnkJlOEfhdJpp2ic=\");\n\n_c = StarWarProvider;\nexport default StarWarProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","reqApiFetch","starWarContext","StarWarContext","StarWarProvider","children","history","setStarWarProvider","name","species","gender","episode","isLoading","setIsLoading","fetchPlanets","response","fetch","ok","newError","json","message","data","setGitData","push","e","status","error"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport reqApiFetch from '../service/requesteAPI';\nimport starWarContext from './StarWarContext';\nimport StarWarContext from './StarWarContext';\n\nfunction StarWarProvider({ children, history }) {\n  const [StarWarProvider, setStarWarProvider] = useState({ name: '', species: '', gender: '', episode: '' })\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://swapi.dev/api/planets');\n\n      if (!response.ok) {\n        const newError = await response.json();\n        throw newError.message;\n      }\n\n      const data = await response.json();\n      setGitData(json);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({ name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <StarWarContext.Provider value={ fetchPlanets }>\n      {children}\n    </StarWarContext.Provider>\n\n  );\n  //  const [data, setData] = useState([]);\n  //  useEffect(() => {\n  //    reqApiFetch().then((response) => setData(response));\n  //  }, []);\n\n  //  const value = useMemo(() => ({\n  //    data,\n  //  }), [data]);\n\n//  return (\n//    <StarWarContext.Provider value={value}>\n//      {children}\n//    </StarWarContext.Provider>\n//  );\n}\n\nexport default StarWarProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,eAAT,OAAgD;EAAA;;EAAA,IAAvB;IAAEC,QAAF;IAAYC;EAAZ,CAAuB;EAC9C,MAAM,CAACF,eAAD,EAAkBG,kBAAlB,IAAwCP,QAAQ,CAAC;IAAEQ,IAAI,EAAE,EAAR;IAAYC,OAAO,EAAE,EAArB;IAAyBC,MAAM,EAAE,EAAjC;IAAqCC,OAAO,EAAE;EAA9C,CAAD,CAAtD;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;;EACA,MAAMc,YAAY,GAAG,YAAY;IAC/B,IAAI;MACFD,YAAY,CAAC,IAAD,CAAZ;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;;MAEA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAvB;QACA,MAAMD,QAAQ,CAACE,OAAf;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACI,IAAT,EAAnB;MACAG,UAAU,CAACH,IAAD,CAAV;MACAb,OAAO,CAACiB,IAAR,CAAa,UAAb;IACD,CAZD,CAYE,OAAOC,CAAP,EAAU;MACVX,YAAY,CAAC;QAAEL,IAAI,EAAE,EAAR;QACXC,OAAO,EAAE,EADE;QAEXC,MAAM,EAAE,EAFG;QAGXe,MAAM,EAAE,EAHG;QAIXd,OAAO,EAAE,EAJE;QAKXe,KAAK,EAAEF;MALI,CAAD,CAAZ;IAMD,CAnBD,SAmBU;MACRX,YAAY,CAAC,KAAD,CAAZ;IACD;EACF,CAvBD;;EAyBA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGC,YAAjC;IAAA,UACGT;EADH;IAAA;IAAA;IAAA;EAAA,QADF,CA5B8C,CAkC9C;EACA;EACA;EACA;EAEA;EACA;EACA;EAEF;EACA;EACA;EACA;EACA;AACC;;GAhDQD,e;;KAAAA,e;AAkDT,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}