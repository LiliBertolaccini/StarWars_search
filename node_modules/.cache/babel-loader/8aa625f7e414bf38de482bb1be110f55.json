{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarContext from './StarWarContext';\nimport fetchApi from '../service/requestAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [dataPlanets, setDataPlanets] = useState([]);\n  const [listPlanet, setListPlanet] = useState([]); // const [filter, setFilter] = useState([]);\n\n  const [search, setSearch] = useState([]); // const { input, setInput } = useState('');\n\n  useEffect(() => {\n    fetchApi().then(request => request.filter(el => delete el.residents)).then(response => setData(response));\n  }, []);\n  const value = useMemo(() => ({\n    data,\n    // filter,\n    search,\n    setSearch,\n    dataPlanets,\n    setDataPlanets,\n    listPlanet,\n    setListPlanet\n  }), [data, search, dataPlanets, listPlanet]);\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StarWarProvider, \"rbrTpuE0hYiBMUfdk+yAhMhUdrM=\");\n\n_c = StarWarProvider;\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default StarWarProvider; //    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","PropTypes","StarWarContext","fetchApi","StarWarProvider","children","data","setData","dataPlanets","setDataPlanets","listPlanet","setListPlanet","search","setSearch","then","request","filter","el","residents","response","value","propTypes","node","isRequired"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarContext from './StarWarContext';\nimport fetchApi from '../service/requestAPI';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [dataPlanets, setDataPlanets] = useState([]);\n  const [listPlanet, setListPlanet] = useState([]);\n  // const [filter, setFilter] = useState([]);\n  const [search, setSearch] = useState([]);\n  // const { input, setInput } = useState('');\n\n  useEffect(() => {\n    fetchApi()\n      .then((request) => request.filter((el) => delete el.residents))\n      .then((response) => setData(response));\n      \n  }, []);\n\n  const value = useMemo(() => ({\n    data,\n    // filter,\n    search,\n    setSearch,\n    dataPlanets,\n    setDataPlanets,\n    listPlanet,\n    setListPlanet,\n  }), [data, search, dataPlanets, listPlanet]);\n\n  return (\n    <StarWarContext.Provider value={ value }>\n      {children}\n    </StarWarContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default StarWarProvider;\n\n//    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,SAASC,eAAT,OAAuC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACrC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C,CAHqC,CAIrC;;EACA,MAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC,CALqC,CAMrC;;EAEAD,SAAS,CAAC,MAAM;IACdK,QAAQ,GACLW,IADH,CACSC,OAAD,IAAaA,OAAO,CAACC,MAAR,CAAgBC,EAAD,IAAQ,OAAOA,EAAE,CAACC,SAAjC,CADrB,EAEGJ,IAFH,CAESK,QAAD,IAAcZ,OAAO,CAACY,QAAD,CAF7B;EAID,CALQ,EAKN,EALM,CAAT;EAOA,MAAMC,KAAK,GAAGpB,OAAO,CAAC,OAAO;IAC3BM,IAD2B;IAE3B;IACAM,MAH2B;IAI3BC,SAJ2B;IAK3BL,WAL2B;IAM3BC,cAN2B;IAO3BC,UAP2B;IAQ3BC;EAR2B,CAAP,CAAD,EASjB,CAACL,IAAD,EAAOM,MAAP,EAAeJ,WAAf,EAA4BE,UAA5B,CATiB,CAArB;EAWA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGU,KAAjC;IAAA,UACGf;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA/BQD,e;;KAAAA,e;AAiCTA,eAAe,CAACiB,SAAhB,GAA4B;EAC1BhB,QAAQ,EAAEJ,SAAS,CAACqB,IAAV,CAAeC;AADC,CAA5B;AAIA,eAAenB,eAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}