{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types'; // import reqApiFetch from '../service/requestAPI';\n\nimport StarWarContext from './StarWarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState([]);\n  const [search, setSearch] = useState([]);\n  const [inputs, setInputs] = useState('');\n  useEffect(() => {\n    async function fetchAPI() {\n      try {\n        const response = await fetch('https://swapi.dev/api/planets');\n        const dAta = await response.json();\n        const retDataResults = dAta.results;\n        const filterResult = retDataResults.map(planet => {\n          delete planet.residents;\n          return planet;\n        });\n        setData(filterResult);\n        setSearch(filterResult);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    }\n\n    fetchAPI();\n  }, []);\n  const value = useMemo(() => ({\n    data,\n    filter,\n    setFilter,\n    search,\n    setSearch,\n    inputs\n  }), [data, filter, search, setSearch, setFilter, inputs, setInputs]);\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StarWarProvider, \"wEzkVu5Ic8LK1Ih+2GYmE2WjYgI=\");\n\n_c = StarWarProvider;\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default StarWarProvider; //    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","PropTypes","StarWarContext","StarWarProvider","children","data","setData","filter","setFilter","search","setSearch","inputs","setInputs","fetchAPI","response","fetch","dAta","json","retDataResults","results","filterResult","map","planet","residents","error","Error","message","value","propTypes","node","isRequired"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n// import reqApiFetch from '../service/requestAPI';\nimport StarWarContext from './StarWarContext';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState([]);\n  const [search, setSearch] = useState([]);\n  const [inputs, setInputs] = useState('');\n\n  useEffect(() => {\n    async function fetchAPI() {\n      try {\n        const response = await fetch('https://swapi.dev/api/planets');\n        const dAta = await response.json();\n        const retDataResults = dAta.results;\n\n        const filterResult = retDataResults.map((planet) => {\n          delete planet.residents;\n          return planet;\n        });\n        setData(filterResult);\n        setSearch(filterResult);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    }\n    fetchAPI();\n  }, []);\n\n  const value = useMemo(() => ({\n    data,\n    filter,\n    setFilter,\n    search,\n    setSearch,\n    inputs\n  }), [data, filter, search, setSearch, setFilter, inputs, setInputs]);\n\n  return (\n    <StarWarContext.Provider value={ value }>\n      {children}\n    </StarWarContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default StarWarProvider;\n\n//    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,eAAT,OAAuC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACrC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;EAEAD,SAAS,CAAC,MAAM;IACd,eAAee,QAAf,GAA0B;MACxB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;QACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAA5B;QAEA,MAAMC,YAAY,GAAGF,cAAc,CAACG,GAAf,CAAoBC,MAAD,IAAY;UAClD,OAAOA,MAAM,CAACC,SAAd;UACA,OAAOD,MAAP;QACD,CAHoB,CAArB;QAIAhB,OAAO,CAACc,YAAD,CAAP;QACAV,SAAS,CAACU,YAAD,CAAT;MACD,CAXD,CAWE,OAAOI,KAAP,EAAc;QACd,MAAM,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,CAAN;MACD;IACF;;IACDb,QAAQ;EACT,CAlBQ,EAkBN,EAlBM,CAAT;EAoBA,MAAMc,KAAK,GAAG3B,OAAO,CAAC,OAAO;IAC3BK,IAD2B;IAE3BE,MAF2B;IAG3BC,SAH2B;IAI3BC,MAJ2B;IAK3BC,SAL2B;IAM3BC;EAN2B,CAAP,CAAD,EAOjB,CAACN,IAAD,EAAOE,MAAP,EAAeE,MAAf,EAAuBC,SAAvB,EAAkCF,SAAlC,EAA6CG,MAA7C,EAAqDC,SAArD,CAPiB,CAArB;EASA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGe,KAAjC;IAAA,UACGvB;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GAxCQD,e;;KAAAA,e;AA0CTA,eAAe,CAACyB,SAAhB,GAA4B;EAC1BxB,QAAQ,EAAEH,SAAS,CAAC4B,IAAV,CAAeC;AADC,CAA5B;AAIA,eAAe3B,eAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}