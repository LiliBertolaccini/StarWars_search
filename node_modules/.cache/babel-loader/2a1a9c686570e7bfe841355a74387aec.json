{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport reqApiFetch from '../service/requestAPI';\nimport StarWarContext from './StarWarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarsProvider() {\n  _s();\n\n  const [StarWarProvider, setStarWarProvider] = useState({\n    StarWarProvider\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://swapi.dev/api/planets');\n\n      if (!response.ok) {\n        const newError = await response.json();\n        throw newError.message;\n      }\n\n      const data = await response.json();\n      setGitData(data);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({\n        name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }; // const [DATA, setData] = useState();\n  //    const fetchPlanets = async () => {\n  //      const response = await fetch('https://swapi.dev/api/planets');\n  //      const data = await response.json();\n  //      setData(data);\n  //    }\n  //    fetchData();\n  //   }, [setData]),\n\n\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({});\n  useEffect(() => {\n    reqApiFetch().then(response => setData(response));\n  }, []);\n  const value = useMemo(() => ({\n    data,\n    filters,\n    setFilters\n  }), [data, filters, setFilters]);\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StarWarsProvider, \"fSBB3+xKjPKgSQ04AldCSI5QgXU=\");\n\n_c = StarWarsProvider;\nexport default StarWarsProvider; // import React, { useEffect, useMemo, useState } from 'react';\n/// / import reqApiFetch from '../service/requesteAPI';\n// import StarWarContext from './StarWarContext';\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/plantes');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        species: '',\n//        gender: '',\n//        status: '',\n//        episode: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n//  return (\n//    <StarWarContext.Provider value={ fetchPlanets }>\n//      {children}\n//    </StarWarContext.Provider>\n//  );\n//  //  const [data, setData] = useState([]);\n//  //  useEffect(() => {\n//  //    reqApiFetch().then((response) => setData(response));\n//  //  }, []);\n//  //  const value = useMemo(() => ({\n//  //    data,\n//  //  }), [data]);\n/// /  return (\n/// /    <StarWarContext.Provider value={value}>\n/// /      {children}\n/// /    </StarWarContext.Provider>\n/// /  );\n// }\n// export default StarWarProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarsProvider\");","map":{"version":3,"names":["React","useEffect","useState","reqApiFetch","StarWarContext","StarWarsProvider","StarWarProvider","setStarWarProvider","isLoading","setIsLoading","fetchPlanets","response","fetch","ok","newError","json","message","data","setGitData","history","push","e","name","species","gender","status","episode","error","setData","filters","setFilters","then","value","useMemo","children"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport reqApiFetch from '../service/requestAPI';\nimport StarWarContext from './StarWarContext';\n\nfunction StarWarsProvider() {\n  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://swapi.dev/api/planets');\n\n      if (!response.ok) {\n        const newError = await response.json();\n        throw newError.message;\n      }\n\n      const data = await response.json();\n      setGitData(data);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({ name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n// const [DATA, setData] = useState();\n\n  //    const fetchPlanets = async () => {\n  //      const response = await fetch('https://swapi.dev/api/planets');\n  //      const data = await response.json();\n  //      setData(data);\n  //    }\n  //    fetchData();\n  //   }, [setData]),\n\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({});\n  useEffect(() => {\n    reqApiFetch().then((response) => setData(response));\n  }, []);\n\n  const value = useMemo(() => ({\n    data,\n    filters,\n    setFilters,\n  }), [data, filters, setFilters]);\n\n  return (\n    <StarWarContext.Provider value={ value }>\n      {children}\n    </StarWarContext.Provider>\n\n  );\n}\n\nexport default StarWarsProvider;\n\n// import React, { useEffect, useMemo, useState } from 'react';\n/// / import reqApiFetch from '../service/requesteAPI';\n// import StarWarContext from './StarWarContext';\n\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/plantes');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        species: '',\n//        gender: '',\n//        status: '',\n//        episode: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n\n//  return (\n//    <StarWarContext.Provider value={ fetchPlanets }>\n//      {children}\n//    </StarWarContext.Provider>\n\n//  );\n//  //  const [data, setData] = useState([]);\n//  //  useEffect(() => {\n//  //    reqApiFetch().then((response) => setData(response));\n//  //  }, []);\n\n//  //  const value = useMemo(() => ({\n//  //    data,\n//  //  }), [data]);\n\n/// /  return (\n/// /    <StarWarContext.Provider value={value}>\n/// /      {children}\n/// /    </StarWarContext.Provider>\n/// /  );\n// }\n\n// export default StarWarProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,gBAAT,GAA4B;EAAA;;EAC1B,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAAC;IAAEI;EAAF,CAAD,CAAtD;EACA,MAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;;EACA,MAAMQ,YAAY,GAAG,YAAY;IAC/B,IAAI;MACFD,YAAY,CAAC,IAAD,CAAZ;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;;MAEA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAvB;QACA,MAAMD,QAAQ,CAACE,OAAf;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACI,IAAT,EAAnB;MACAG,UAAU,CAACD,IAAD,CAAV;MACAE,OAAO,CAACC,IAAR,CAAa,UAAb;IACD,CAZD,CAYE,OAAOC,CAAP,EAAU;MACVZ,YAAY,CAAC;QAAEa,IAAI,EAAE,EAAR;QACXC,OAAO,EAAE,EADE;QAEXC,MAAM,EAAE,EAFG;QAGXC,MAAM,EAAE,EAHG;QAIXC,OAAO,EAAE,EAJE;QAKXC,KAAK,EAAEN;MALI,CAAD,CAAZ;IAMD,CAnBD,SAmBU;MACRZ,YAAY,CAAC,KAAD,CAAZ;IACD;EACF,CAvBD,CAH0B,CA2B5B;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAM,CAACQ,IAAD,EAAOW,OAAP,IAAkB1B,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,EAAD,CAAtC;EACAD,SAAS,CAAC,MAAM;IACdE,WAAW,GAAG4B,IAAd,CAAoBpB,QAAD,IAAciB,OAAO,CAACjB,QAAD,CAAxC;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,MAAMqB,KAAK,GAAGC,OAAO,CAAC,OAAO;IAC3BhB,IAD2B;IAE3BY,OAF2B;IAG3BC;EAH2B,CAAP,CAAD,EAIjB,CAACb,IAAD,EAAOY,OAAP,EAAgBC,UAAhB,CAJiB,CAArB;EAMA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGE,KAAjC;IAAA,UACGE;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GAvDQ7B,gB;;KAAAA,gB;AAyDT,eAAeA,gBAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}