{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarContext from './StarWarContext';\nimport fetchApi from '../service/requestAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // const [data, setData] = useState([]);\n  const [dataPlanets, setDataPlanets] = useState([]);\n  const [listPlanet, setListPlanet] = useState([]);\n  const [filterNumber, setFilterNumber] = useState({\n    column: co,\n    comparison: 'maior que',\n    value: 0\n  });\n  const [search, setSearch] = useState([]);\n  const [filterInput, setFilterInput] = useState([]); // useEffect(() => {\n  //  fetchApi()\n  //    .then((request) => request.filter((el) => delete el.residents))\n  //    .then((response) => setData(response));\n  //  setDataPlanets(data);\n  // }, [data]);\n\n  useEffect(() => {\n    const api = fetchApi().results.filter(el => delete el.residents);\n    setDataPlanets(api);\n  }, []);\n  const value = useMemo(() => ({\n    // data,\n    filterNumber,\n    setFilterNumber,\n    search,\n    setSearch,\n    dataPlanets,\n    setDataPlanets,\n    listPlanet,\n    setListPlanet,\n    filterInput,\n    setFilterInput\n  }), [search, dataPlanets, listPlanet, filterNumber, filterInput]);\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StarWarProvider, \"mvXENcY97D0hDky1T8WCwZi4x6Q=\");\n\n_c = StarWarProvider;\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default StarWarProvider; //    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","PropTypes","StarWarContext","fetchApi","StarWarProvider","children","dataPlanets","setDataPlanets","listPlanet","setListPlanet","filterNumber","setFilterNumber","column","co","comparison","value","search","setSearch","filterInput","setFilterInput","api","results","filter","el","residents","propTypes","node","isRequired"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarContext from './StarWarContext';\nimport fetchApi from '../service/requestAPI';\n\nfunction StarWarProvider({ children }) {\n  // const [data, setData] = useState([]);\n  const [dataPlanets, setDataPlanets] = useState([]);\n  const [listPlanet, setListPlanet] = useState([]);\n  const [filterNumber, setFilterNumber] = useState({\n    column: co,\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [search, setSearch] = useState([]);\n  const [filterInput, setFilterInput] = useState([]);\n\n  // useEffect(() => {\n  //  fetchApi()\n  //    .then((request) => request.filter((el) => delete el.residents))\n  //    .then((response) => setData(response));\n  //  setDataPlanets(data);\n  // }, [data]);\n\n  useEffect(() => {\n    const api = fetchApi().results.filter((el) => delete el.residents);\n    setDataPlanets(api);\n  }, []);\n\n  const value = useMemo(() => ({\n    // data,\n    filterNumber,\n    setFilterNumber,\n    search,\n    setSearch,\n    dataPlanets,\n    setDataPlanets,\n    listPlanet,\n    setListPlanet,\n    filterInput,\n    setFilterInput,\n  }), [search, dataPlanets, listPlanet, filterNumber, filterInput]);\n\n  return (\n    <StarWarContext.Provider value={ value }>\n      {children}\n    </StarWarContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default StarWarProvider;\n\n//    const fetchPlanets = async () => {\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      const data = await response.json();\n//      setData(data);\n//    }\n//    fetchData();\n//   }, [setData]);\n\n//  const [data, setData] = useState([]);\n//  const [filters, setFilters] = useState({});\n//  useEffect(() => {\n//    reqApiFetch().then((response) => setData(response));\n//  }, []);\n\n//  const value = useMemo(() => ({\n//    data,\n//    filters,\n//    setFilters,\n//  }), [data, filters, setFilters]);\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/planets');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n// export default function StarWarProvider({ children }) {\n//  const [data, setData] = useState([]);\n//  useEffect(() => {\n//    async function fetch() {\n//      setData(await fetchApi());\n//    }\n//    fetch();\n//  }, []);\n//  const value = useMemo(() => ({\n//    data,\n//  }), [data]);\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,SAASC,eAAT,OAAuC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACrC;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC;IAC/Ca,MAAM,EAAEC,EADuC;IAE/CC,UAAU,EAAE,WAFmC;IAG/CC,KAAK,EAAE;EAHwC,CAAD,CAAhD;EAKA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,EAAD,CAA9C,CAVqC,CAYrC;EACA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMsB,GAAG,GAAGjB,QAAQ,GAAGkB,OAAX,CAAmBC,MAAnB,CAA2BC,EAAD,IAAQ,OAAOA,EAAE,CAACC,SAA5C,CAAZ;IACAjB,cAAc,CAACa,GAAD,CAAd;EACD,CAHQ,EAGN,EAHM,CAAT;EAKA,MAAML,KAAK,GAAGf,OAAO,CAAC,OAAO;IAC3B;IACAU,YAF2B;IAG3BC,eAH2B;IAI3BK,MAJ2B;IAK3BC,SAL2B;IAM3BX,WAN2B;IAO3BC,cAP2B;IAQ3BC,UAR2B;IAS3BC,aAT2B;IAU3BS,WAV2B;IAW3BC;EAX2B,CAAP,CAAD,EAYjB,CAACH,MAAD,EAASV,WAAT,EAAsBE,UAAtB,EAAkCE,YAAlC,EAAgDQ,WAAhD,CAZiB,CAArB;EAcA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGH,KAAjC;IAAA,UACGV;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA3CQD,e;;KAAAA,e;AA6CTA,eAAe,CAACqB,SAAhB,GAA4B;EAC1BpB,QAAQ,EAAEJ,SAAS,CAACyB,IAAV,CAAeC;AADC,CAA5B;AAIA,eAAevB,eAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}