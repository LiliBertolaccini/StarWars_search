{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport reqApiFetch from '../service/requesteAPI';\nimport starWarContext from './StarWarContext';\nimport StarWarContext from './StarWarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [StarWarProvider, setStarWarProvider] = useState;\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const data = await fetch('https://swapi.dev/api/planets');\n\n      if (!data.ok) {\n        const newError = await data.json();\n        throw newError.message;\n      }\n\n      const json = await data.json();\n      setGitData(json);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({\n        name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: fetchPlanets,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this); //  const [data, setData] = useState([]);\n  //  useEffect(() => {\n  //    reqApiFetch().then((response) => setData(response));\n  //  }, []);\n  //  const value = useMemo(() => ({\n  //    data,\n  //  }), [data]);\n  //  return (\n  //    <StarWarContext.Provider value={value}>\n  //      {children}\n  //    </StarWarContext.Provider>\n  //  );\n}\n\n_s(StarWarProvider, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n\n_c = StarWarProvider;\nexport default StarWarProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","reqApiFetch","starWarContext","StarWarContext","StarWarProvider","children","setStarWarProvider","isLoading","setIsLoading","fetchPlanets","data","fetch","ok","newError","json","message","setGitData","history","push","e","name","species","gender","status","episode","error"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport reqApiFetch from '../service/requesteAPI';\nimport starWarContext from './StarWarContext';\nimport StarWarContext from './StarWarContext';\n\nfunction StarWarProvider({ children }) {\n  const [StarWarProvider, setStarWarProvider] = useState\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchPlanets = async () => {\n    try {\n      setIsLoading(true);\n      const data = await fetch('https://swapi.dev/api/planets');\n\n      if (!data.ok) {\n        const newError = await data.json();\n        throw newError.message;\n      }\n\n      const json = await data.json();\n      setGitData(json);\n      history.push('/plantes');\n    } catch (e) {\n      setIsLoading({ name: '',\n        species: '',\n        gender: '',\n        status: '',\n        episode: '',\n        error: e });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <StarWarContext.Provider value={ fetchPlanets }>\n      {children}\n    </StarWarContext.Provider>\n\n  );\n  //  const [data, setData] = useState([]);\n  //  useEffect(() => {\n  //    reqApiFetch().then((response) => setData(response));\n  //  }, []);\n\n  //  const value = useMemo(() => ({\n  //    data,\n  //  }), [data]);\n\n//  return (\n//    <StarWarContext.Provider value={value}>\n//      {children}\n//    </StarWarContext.Provider>\n//  );\n}\n\nexport default StarWarProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,eAAT,OAAuC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACrC,MAAM,CAACD,eAAD,EAAkBE,kBAAlB,IAAwCN,QAA9C;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;EACA,MAAMS,YAAY,GAAG,YAAY;IAC/B,IAAI;MACFD,YAAY,CAAC,IAAD,CAAZ;MACA,MAAME,IAAI,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAAxB;;MAEA,IAAI,CAACD,IAAI,CAACE,EAAV,EAAc;QACZ,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,IAAL,EAAvB;QACA,MAAMD,QAAQ,CAACE,OAAf;MACD;;MAED,MAAMD,IAAI,GAAG,MAAMJ,IAAI,CAACI,IAAL,EAAnB;MACAE,UAAU,CAACF,IAAD,CAAV;MACAG,OAAO,CAACC,IAAR,CAAa,UAAb;IACD,CAZD,CAYE,OAAOC,CAAP,EAAU;MACVX,YAAY,CAAC;QAAEY,IAAI,EAAE,EAAR;QACXC,OAAO,EAAE,EADE;QAEXC,MAAM,EAAE,EAFG;QAGXC,MAAM,EAAE,EAHG;QAIXC,OAAO,EAAE,EAJE;QAKXC,KAAK,EAAEN;MALI,CAAD,CAAZ;IAMD,CAnBD,SAmBU;MACRX,YAAY,CAAC,KAAD,CAAZ;IACD;EACF,CAvBD;;EAyBA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGC,YAAjC;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF,CA5BqC,CAkCrC;EACA;EACA;EACA;EAEA;EACA;EACA;EAEF;EACA;EACA;EACA;EACA;AACC;;GAhDQD,e;;KAAAA,e;AAkDT,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}