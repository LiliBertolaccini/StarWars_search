{"ast":null,"code":"var _jsxFileName = \"/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react'; // import reqApiFetch from '../service/requestAPI';\n\nimport StarWarContext from './StarWarContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StarWarsProvider() {\n  _s();\n\n  // const [DATA, setData] = useState();\n  //    const fetchPlanets = async () => {\n  //      const response = await fetch('https://swapi.dev/api/planets');\n  //      const data = await response.json();\n  //      setData(data);\n  //    }\n  //    fetchData();\n  //   }, [setData]);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({});\n  useEffect(() => {\n    reqApiFetch().then(response => setData(response));\n  }, []);\n  const value = useMemo(() => ({\n    data,\n    filters,\n    setFilters\n  }), [data, filters, setFilters]);\n  return /*#__PURE__*/_jsxDEV(StarWarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StarWarsProvider, \"tga5+ptH1Rm0sJPMu+VG++yWBV8=\");\n\n_c = StarWarsProvider;\nexport default StarWarsProvider; // import React, { useEffect, useMemo, useState } from 'react';\n/// / import reqApiFetch from '../service/requesteAPI';\n// import StarWarContext from './StarWarContext';\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/plantes');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        species: '',\n//        gender: '',\n//        status: '',\n//        episode: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n//  return (\n//    <StarWarContext.Provider value={ fetchPlanets }>\n//      {children}\n//    </StarWarContext.Provider>\n//  );\n//  //  const [data, setData] = useState([]);\n//  //  useEffect(() => {\n//  //    reqApiFetch().then((response) => setData(response));\n//  //  }, []);\n//  //  const value = useMemo(() => ({\n//  //    data,\n//  //  }), [data]);\n/// /  return (\n/// /    <StarWarContext.Provider value={value}>\n/// /      {children}\n/// /    </StarWarContext.Provider>\n/// /  );\n// }\n// export default StarWarProvider;\n\nfunction StarWarProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState([]);\n  const [search, setSearch] = useState([]);\n  useEffect(() => {\n    async function fetchAPI() {\n      try {\n        const response = await fetch('https://swapi.dev/api/planets');\n        const dAta = await response.json();\n        const retDataResults = dAta.results;\n        const filterResult = retDataResults.map(planet => {\n          delete planet.residents;\n          return planet;\n        });\n        setData(filterResult);\n        setSearch(filterResult);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    }\n\n    fetchAPI();\n  }, []);\n  const values = useMemo(() => (({\n    data,\n    filter,\n    setFilter,\n    search,\n    setSearch\n  }), [data, filter, search, setSearch, setFilter]));\n}\n\n_s2(StarWarProvider, \"6kJlj9jR/fmbHD+f/n9r+kKYavI=\");\n\n_c2 = StarWarProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StarWarsProvider\");\n$RefreshReg$(_c2, \"StarWarProvider\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","StarWarContext","StarWarsProvider","data","setData","filters","setFilters","reqApiFetch","then","response","value","children","StarWarProvider","filter","setFilter","search","setSearch","fetchAPI","fetch","dAta","json","retDataResults","results","filterResult","map","planet","residents","error","Error","message","values"],"sources":["/Users/lilianbarrosbertolaccini/PROJETOS/sd-025-b-project-starwars-planets-search/src/context/StarWarProvider.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\n// import reqApiFetch from '../service/requestAPI';\nimport StarWarContext from './StarWarContext';\n\nfunction StarWarsProvider() {\n  // const [DATA, setData] = useState();\n\n  //    const fetchPlanets = async () => {\n  //      const response = await fetch('https://swapi.dev/api/planets');\n  //      const data = await response.json();\n  //      setData(data);\n  //    }\n  //    fetchData();\n  //   }, [setData]);\n\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({});\n  useEffect(() => {\n    reqApiFetch().then((response) => setData(response));\n  }, []);\n\n  const value = useMemo(() => ({\n    data,\n    filters,\n    setFilters,\n  }), [data, filters, setFilters]);\n\n  return (\n    <StarWarContext.Provider value={ value }>\n      {children}\n    </StarWarContext.Provider>\n\n  );\n}\n\nexport default StarWarsProvider;\n\n// import React, { useEffect, useMemo, useState } from 'react';\n/// / import reqApiFetch from '../service/requesteAPI';\n// import StarWarContext from './StarWarContext';\n\n// function StarWarProvider({ children, history }) {\n//  const [StarWarProvider, setStarWarProvider] = useState({ StarWarProvider });\n//  const [isLoading, setIsLoading] = useState(false);\n//  const fetchPlanets = async () => {\n//    try {\n//      setIsLoading(true);\n//      const response = await fetch('https://swapi.dev/api/planets');\n\n//      if (!response.ok) {\n//        const newError = await response.json();\n//        throw newError.message;\n//      }\n\n//      const data = await response.json();\n//      setGitData(data);\n//      history.push('/plantes');\n//    } catch (e) {\n//      setIsLoading({ name: '',\n//        species: '',\n//        gender: '',\n//        status: '',\n//        episode: '',\n//        error: e });\n//    } finally {\n//      setIsLoading(false);\n//    }\n//  };\n\n//  return (\n//    <StarWarContext.Provider value={ fetchPlanets }>\n//      {children}\n//    </StarWarContext.Provider>\n\n//  );\n//  //  const [data, setData] = useState([]);\n//  //  useEffect(() => {\n//  //    reqApiFetch().then((response) => setData(response));\n//  //  }, []);\n\n//  //  const value = useMemo(() => ({\n//  //    data,\n//  //  }), [data]);\n\n/// /  return (\n/// /    <StarWarContext.Provider value={value}>\n/// /      {children}\n/// /    </StarWarContext.Provider>\n/// /  );\n// }\n\n// export default StarWarProvider;\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [filter, setFilter] = useState([]);\n  const [search, setSearch] = useState([]);\n\n  useEffect(() => {\n    async function fetchAPI() {\n      try {\n        const response = await fetch('https://swapi.dev/api/planets');\n        const dAta = await response.json();\n        const retDataResults = dAta.results;\n\n        const filterResult = retDataResults.map((planet) => {\n          delete planet.residents;\n          return planet;\n        });\n        setData(filterResult);\n        setSearch(filterResult);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    }\n    fetchAPI();\n  }, []);\n\n  const values = useMemo(() => ({\n    data,\n    filter,\n    setFilter,\n    search,\n    setSearch,\n  }, [data, filter, search, setSearch, setFilter]));\n\n  \n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,gBAAT,GAA4B;EAAA;;EAC1B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;EACAD,SAAS,CAAC,MAAM;IACdS,WAAW,GAAGC,IAAd,CAAoBC,QAAD,IAAcL,OAAO,CAACK,QAAD,CAAxC;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,MAAMC,KAAK,GAAGV,OAAO,CAAC,OAAO;IAC3BG,IAD2B;IAE3BE,OAF2B;IAG3BC;EAH2B,CAAP,CAAD,EAIjB,CAACH,IAAD,EAAOE,OAAP,EAAgBC,UAAhB,CAJiB,CAArB;EAMA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAGI,KAAjC;IAAA,UACGC;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA7BQT,gB;;KAAAA,gB;AA+BT,eAAeA,gBAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASU,eAAT,OAAuC;EAAA;;EAAA,IAAd;IAAED;EAAF,CAAc;EACrC,MAAM,CAACR,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;EAEAD,SAAS,CAAC,MAAM;IACd,eAAemB,QAAf,GAA0B;MACxB,IAAI;QACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,+BAAD,CAA5B;QACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;QACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAA5B;QAEA,MAAMC,YAAY,GAAGF,cAAc,CAACG,GAAf,CAAoBC,MAAD,IAAY;UAClD,OAAOA,MAAM,CAACC,SAAd;UACA,OAAOD,MAAP;QACD,CAHoB,CAArB;QAIArB,OAAO,CAACmB,YAAD,CAAP;QACAP,SAAS,CAACO,YAAD,CAAT;MACD,CAXD,CAWE,OAAOI,KAAP,EAAc;QACd,MAAM,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,CAAN;MACD;IACF;;IACDZ,QAAQ;EACT,CAlBQ,EAkBN,EAlBM,CAAT;EAoBA,MAAMa,MAAM,GAAG9B,OAAO,CAAC,OAAO;IAC5BG,IAD4B;IAE5BU,MAF4B;IAG5BC,SAH4B;IAI5BC,MAJ4B;IAK5BC;EAL4B,IAM3B,CAACb,IAAD,EAAOU,MAAP,EAAeE,MAAf,EAAuBC,SAAvB,EAAkCF,SAAlC,CANoB,CAAD,CAAtB;AASD;;IAlCQF,e;;MAAAA,e"},"metadata":{},"sourceType":"module"}